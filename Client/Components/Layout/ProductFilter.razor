@inject NavigationManager NavManager

<MudPaper Elevation="25">
	<MudToolBar>
		<MudNumericField @bind-Value="CurrentMaxPrice" Label="Max Price" Clearable="true" />
		<p>@query</p>
	</MudToolBar>
</MudPaper>

@code {
	public string query { get; set; }
	[Parameter] 
	public EventCallback<string> FilterQueryChanged { get; set; }

	private decimal? _currentMaxPrice;

	private decimal? CurrentMaxPrice
	{
		get => _currentMaxPrice;
		set
		{
			if (_currentMaxPrice != value)
			{
				_currentMaxPrice = value; // Update the backing field

				// Update the query string based on the new value
				query = _currentMaxPrice.HasValue ? $"?maxprice={_currentMaxPrice.Value}" : "";

				// Invoke the EventCallback to notify the parent component asynchronously
				// We don't await an async void, so we just fire and forget here.
				// If you need to ensure parent completes before continuing, make this method async Task
				// and await the InvokeAsync.
				_ = FilterQueryChanged.InvokeAsync(query); // Use _ = to suppress compiler warning for unawaited Task
			}
		}
	}

	private async void HandleMaxPriceChanged(decimal? newValue)
	{
		CurrentMaxPrice = newValue;

		query = CurrentMaxPrice.HasValue ? $"?maxprice={CurrentMaxPrice.Value}" : "";

		await FilterQueryChanged.InvokeAsync(query);
	}
}
