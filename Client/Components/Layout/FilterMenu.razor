@inject NavigationManager NavigationManager
@using Client.Components.Util
@using Shared.Models.Filters
@using System.Reflection
@inject Client.Services.FilterStateService FilterStateService

<MudPaper Class="pa-4">
    @if(_isLoaded)
    {
        @* common filtering logic // TODO add test besed search*@
        <MudNumericField @bind-Value="Filter.MinPrice" Label="Min Price"></MudNumericField>
        <MudNumericField @bind-Value="Filter.MaxPrice" Label="Max Price"></MudNumericField>

        @* unique filtering logic *@
        @switch (category)
        {
            case "laptops":
                <CascadingValue Value="@((LaptopFilter)Filter)" Name="ProductFilter" IsFixed="true">
                    <Client.Components.Layout.Filter_Components.LaptopFilterMenu />
                </CascadingValue>
                break;
            case "headphones":
                <CascadingValue Value="@((HeadphonesFilter)Filter)" Name="ProductFilter" IsFixed="true">
                    <Client.Components.Layout.Filter_Components.HeadphonesFilterMenu />
                </CascadingValue>
                break;
            case "phones":
                <CascadingValue Value="@((PhoneFilter)Filter)" Name="ProductFilter" IsFixed="true">
                    <Client.Components.Layout.Filter_Components.PhoneFilterMenu />
                </CascadingValue>
                break;
        }

        <MudCheckBox @bind-Value="Filter.OnSale" Label="Sale"></MudCheckBox>

        <MudButton OnClick="ApplyFilters" Variant="Variant.Filled" ButtonType="ButtonType.Button">Apply</MudButton>
    }
</MudPaper>

@code {
    public ProductFilter Filter { get; set; } = new ProductFilter();
    private string category = "";
    private bool _isLoaded = false;
    private Type filterType;

    protected override void OnParametersSet()
    {
        if (Filter == null) return;
        FilterStateService.OnChange += OnFilterStateChanged;

        category = FilterStateService.SelectedCategory;
        filterType = ProductCategoryMap.GetFilterType(category);

        Filter = (ProductFilter)Activator.CreateInstance(filterType);
        if (NavigationManager.Uri.Contains("?")) { Filter.PopulateFromUri(NavigationManager.Uri); }

        _isLoaded = true;
    }

    private void ApplyFilters()
    {
        NavigationManager.NavigateTo($"{NavigationManager.Uri.Split('?')[0]}?{Filter.ToString()}");
    }

    private async void OnFilterStateChanged()
    {
        await InvokeAsync(() =>
            {
                StateHasChanged();
            });
    }

    public void Dispose()
    {
        FilterStateService.OnChange -= OnFilterStateChanged;
    }
}
