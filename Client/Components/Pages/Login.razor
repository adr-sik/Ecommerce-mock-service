@page "/login"
@using System.ComponentModel.DataAnnotations
@using Client.Authorization
@using Services
@using Shared.Models.DTOs
@using Microsoft.AspNetCore.Components.Authorization;
@inject IServiceProvider ServiceProvider
@inject NavigationManager NavigationManager
@inject JwtAuthenticationStateProvider AuthStateProvider

<h3>Login</h3>

<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudGrid Justify="Justify.Center">
        <MudItem xs="12" sm="7">
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="Username"
                                  @bind-Value="model.Username" For="@(() => model.Username)" />
                    <MudTextField Label="Password" Class="mt-3"
                                  @bind-Value="model.Password" For="@(() => model.Password)" InputType="InputType.Password" />
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Log In</MudButton>
                </MudCardActions>
            </MudCard>
            <MudText Align="Align.Center" Class="mt-4">
                Don't have and account? <MudLink Href="/register">Register</MudLink>
            </MudText>
        </MudItem>
    </MudGrid>
</EditForm>

<p>@test</p>

<MudButton OnClick="TestAuth">@auth</MudButton>
<div></div>
<MudButton OnClick="TestAdmin">@admin</MudButton>

<AuthorizeView>
    <Authorized>
		<p>You are logged in!</p>
        </Authorized>
    <NotAuthorized>
        <p>You are NOT logged in.</p>
	</NotAuthorized>
</AuthorizeView>

@code {
    RegisterAccountForm model = new RegisterAccountForm();
    bool success;
    string test = "test";
    string auth = "auth";
    string admin = "admin";

    public class RegisterAccountForm
    {
        [Required]
        public string Username { get; set; }

        [Required]
        public string Password { get; set; }
    }

    private async Task OnValidSubmit(EditContext context)
    {
        var authService = ServiceProvider.GetRequiredService<AuthService>();
        UserDTO user = new UserDTO
        {
            Username = model.Username,
            Password = model.Password
		};

        var userClaims = await authService.LoginAsync(user);

        if (userClaims != null)
        {
            AuthStateProvider.Login(userClaims);

            success = true;
            test = "Login successful!";
            NavigationManager.NavigateTo("/");
        }
        else
        {
            test = "Login failed.";
        }
        StateHasChanged();
    } 

    private async Task TestAuth()
    {
        var authService = ServiceProvider.GetRequiredService<AuthService>();
        var isAuth = await authService.TestAuth();
        auth = isAuth ? "User is authenticated" : "User is NOT authenticated";
        StateHasChanged();
	}


    private async Task TestAdmin()
    {
        var authService = ServiceProvider.GetRequiredService<AuthService>();
        var isAuth = await authService.TestAdmin();
        admin = isAuth ? "User is an admin" : "User is NOT an admin";
        StateHasChanged();
    }
}


