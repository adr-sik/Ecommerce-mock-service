@page "/products/{Category}/{ProductId:int}/{ProductSlug?}"
@using Humanizer
@using Shared.Models.DTOs.ProductTypesDTOs
@using Shared.Models.DTOs
@using Services
@using Client.Components.Util
@using System.Reflection
@inject NavigationManager NavigationManager
@inject IServiceProvider ServiceProvider
@inject FilterStateService FilterStateService

<PageTitle>@ProductSlug</PageTitle>

@if (product != null)
{
    <HeadContent>
        <meta name="description" content="@product.Brand @product.Model - @product.Description" />
        <meta name="keywords" content="@product.Brand, @product.Model, @Category" />
        <meta property="og:title" content="@product.Brand @product.Model" />
        <meta property="og:description" content="@product.Description" />
        <meta property="og:image" content="@product.Images.First().Path" />
        <meta property="og:url" content="@NavigationManager.Uri" />
    </HeadContent>

    <h3>@product.Brand - @product.Model</h3>
    <MudImage Src="@product.Images.First().Path" Alt="@ProductSlug"></MudImage>
    if (product.Sale != null && product.Sale > 0)
    {
        <h3 style="color:red;">@product.Price</h3>
        <h3 style="display:inline;">@product.GetPriceWithSale()</h3>
    }
    else
    {
        <h3>@product.Price</h3>
    }
    <table class="table">
        <tbody>
            @foreach (var property in GetPropertiesForDisplay())
            {
                var value = property.GetValue(product);

                <tr>                  
                    @if (value != null)
                    {
                        <td>@property.Name.Humanize()</td>
                        <td>@value.ToString()</td>
                    }                 
                </tr>
			}
        </tbody>
    </table>
}
else
{
    <p><em>Loading... @Category</em></p>
}

@code {
    [Parameter]
    public string Category { get; set; }
    [Parameter]
    public int ProductId { get; set; }
    [Parameter]
    public string ProductSlug { get; set; }
    private ProductDTO product;

    protected override async Task OnInitializedAsync()
    {
        FilterStateService.SetCategory("");
        try
        {       
            Type dtoType = ProductCategoryMap.GetDtoType(Category);
            if (dtoType == null) NavigationManager.NavigateTo("/notfound", forceLoad: true);

            var serviceType = typeof(ProductService<>).MakeGenericType(dtoType);
            IProductService service = (IProductService)ServiceProvider.GetService(serviceType);

            Console.WriteLine($"Using service type: {serviceType.Name} for category: {Category}");

            product = await service.GetProductByIdAsync(ProductId);
        }
        catch (InvalidOperationException)
        {
            Console.WriteLine($"Category '{Category}' not found or invalid.");
            NavigationManager.NavigateTo("/notfound", forceLoad: true);
        }
        catch (Exception e)
        {
            Console.WriteLine($"An unexpected error occurred: {e.Message}");
            NavigationManager.NavigateTo("/notfound", forceLoad: true);
        }
    }

	// Get product properties excluding base product ones
    private IEnumerable<PropertyInfo> GetPropertiesForDisplay()
    {
        var ignoreProps = new[] { "Id", "Images", "Sale", "Description", "Model", "Brand", "Price"};
        var properties = product.GetType()
                                .GetProperties()
                                .Where(p => !ignoreProps.Contains(p.Name));
		return properties;
    }
}
