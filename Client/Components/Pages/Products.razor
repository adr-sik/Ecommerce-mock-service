@page "/products/{Category}"
@using Client.Components.Layout
@using Client.Components.Util
@using Microsoft.AspNetCore.WebUtilities
@using Shared.Models.DTOs
@using Shared.Models.DTOs.ProductTypesDTOs
@using Services
@using Shared.Models.Filters
@inject NavigationManager NavigationManager
@inject IServiceProvider ServiceProvider
@inject FilterStateService FilterStateService
@inject PersistentComponentState state

<PageTitle>@CategoryDisplay</PageTitle>

<h3>@CategoryDisplay</h3>

@if (_isLoading)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="d-flex align-items-center mb-3">
        <MudSelect T="string" Value="@selectedSortColumn" ValueChanged="@(col => { selectedSortColumn = col; HandleSorting(col, selectedDescending); })">
            @foreach (var column in sortingColumns)
            {
                <MudSelectItem Value="@column">@column</MudSelectItem>
            }
        </MudSelect>
        <MudText> Order by: </MudText>
        <MudCheckBox ReadOnly="@OrderBoxEnbled" T="bool" Value="@selectedDescending" ValueChanged="@(desc => { selectedDescending = desc; HandleSorting(selectedSortColumn, desc); })"
                     CheckedIcon="@Icons.Material.Filled.ArrowDownward" UncheckedIcon="@Icons.Material.Filled.ArrowUpward">
        </MudCheckBox>
    </div>

    <ProductGrid products="@products" Category="@Category" />

    <div class="d-flex flex-column align-center mt-5 mb-5">
        <MudPagination BoundaryCount="1" MiddleCount="3" Count="totalPages" SelectedChanged="OnPageChanged" Selected="@currentPage"/>
    </div>
}

@code {
    [Parameter]
    public string Category { get; set; } = null!;
    private bool _isLoading = true;
    private bool _isInitialNavigation = true;
	private bool OrderBoxEnbled => string.IsNullOrWhiteSpace(selectedSortColumn);
    private List<ProductDTO> products = new();

    private string selectedSortColumn;
    private bool selectedDescending;
    private int currentPage;
    private int totalPages;

    private string CategoryDisplay { get; set; } = "Loading...";
    private readonly List<string> sortingColumns = new() { "Price" };
    // prevents double loading
    //private PersistingComponentStateSubscription persistingSubscription; TODO : fix double loading issue

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += OnLocationChanged;
        //persistingSubscription = state.RegisterOnPersisting(PersistData);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!state.TryTakeFromJson<List<ProductDTO>>(Category, out var restored))
        {
            if (FilterStateService.SelectedCategory != Category)
            {
                FilterStateService.SetCategory(Category);
            }
            await LoadProductsAsync();
        }
        else
        {
            products = restored ?? new();
        }
    }

    private async Task LoadProductsAsync()
    {
        _isLoading = true;
        StateHasChanged();
        try
        {
            var uri = new Uri(NavigationManager.Uri);
            var queryParams = QueryHelpers.ParseQuery(uri.Query);

            selectedDescending = queryParams.TryGetValue("sortDescending", out var sortDescValues) && 
            bool.TryParse(sortDescValues.FirstOrDefault(), out var parsedSortDesc) 
            ? parsedSortDesc 
            : false;

            selectedSortColumn = queryParams.TryGetValue("sortColumn", out var sortColValues) &&
            !string.IsNullOrWhiteSpace(sortColValues.FirstOrDefault())
            ? sortColValues.FirstOrDefault()!
			: "";

            if (queryParams.TryGetValue("pageNumber", out var pageValues) && int.TryParse(pageValues.FirstOrDefault(), out var parsedPage))
            {
                currentPage = Math.Max(1, parsedPage);
            }
            else
            {
                currentPage = 1;
            }

            // Get DTO based on a map -> redirect if no match found
            Type dtoType = ProductCategoryMap.GetDtoType(Category);
            if (dtoType == null) NavigationManager.NavigateTo("/notfound", forceLoad: true);

            var serviceType = typeof(ProductService<>).MakeGenericType(dtoType);
            IProductService service = (IProductService)ServiceProvider.GetService(serviceType);

            var pagedResponse = await service.GetPagniatedProductsAsync(uri.Query);
            totalPages = (int)Math.Ceiling((double)pagedResponse.TotalCount / 20);
            Console.WriteLine($"TotalCount: {pagedResponse.TotalCount}, Items: {pagedResponse.Items.Count}, PageCount: {totalPages}");
            //
            if (pagedResponse == null)
            {
                Console.WriteLine($"No response from server.");
                return;
            }
            else if (pagedResponse.Items == null)
            {
                Console.WriteLine($"No products found for category '{Category}'.");
                return;
            }
            products = pagedResponse.Items.ToList();
            Console.WriteLine($"Loaded {products.Count} products for category '{Category}'.");
            //
            StateHasChanged();

            CategoryDisplay = Category.ToLowerInvariant();
            CategoryDisplay = string.Concat(CategoryDisplay[0].ToString().ToUpper(), CategoryDisplay.AsSpan(1));
        }
        catch (InvalidOperationException e)
        {
            Console.WriteLine($"Category '{Category}' not found or invalid.");
            Console.WriteLine(e.Message);
            NavigationManager.NavigateTo("/notfound", forceLoad: true);
        }
        catch (Exception e)
        {
            Console.WriteLine($"An unexpected error occurred: {e.Message}");
            NavigationManager.NavigateTo("/notfound", forceLoad: true);
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        // Force the component to re-render and reload data

        InvokeAsync(LoadProductsAsync);
    }

    private void OnPageChanged(int page)
    {
        var uriBuilder = new UriBuilder(NavigationManager.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uriBuilder.Query);
        query.Set("pageNumber", page.ToString());
        uriBuilder.Query = query.ToString();
        NavigationManager.NavigateTo(uriBuilder.ToString());
    }

    private void HandleSorting(string sortColumn, bool? sortDescending)
    {
        var uriBuilder = new UriBuilder(NavigationManager.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uriBuilder.Query);
        query.Set("sortColumn", sortColumn);

        if (sortDescending.HasValue)
            query.Set("sortDescending", sortDescending.Value.ToString());
        else
			query.Remove("sortDescending");

        uriBuilder.Query = query.ToString();
        NavigationManager.NavigateTo(uriBuilder.ToString());
    }

    private Task PersistData()
    {
        state.PersistAsJson(Category, products);
        return Task.CompletedTask;
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
        //persistingSubscription.Dispose();
    }
}
