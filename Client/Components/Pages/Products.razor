@page "/products/{Category}"
@using Client.Components.Layout
@using Client.Components.Util
@using Microsoft.AspNetCore.WebUtilities
@using Shared.Models.DTOs
@using Shared.Models.DTOs.ProductTypesDTOs
@using Services
@using Shared.Models.Filters
@inject NavigationManager NavigationManager
@inject IServiceProvider ServiceProvider
@inject FilterStateService FilterStateService
@inject PersistentComponentState state

<PageTitle>@CategoryDisplay</PageTitle>

<h3>@CategoryDisplay</h3>

@if (_isLoading)
{
    <p><em>Loading...</em></p>
}
else
{
    <ProductGrid products="@products" Category="@Category" />

    <div class="d-flex flex-column align-center mt-5 mb-5">
        <MudPagination BoundaryCount="1" MiddleCount="3" Count="totalPages" SelectedChanged="OnPageChanged" Selected="@currentPage"/>
    </div>
}

@code {
    [Parameter]
    public string Category { get; set; } = null!;
    private bool _isLoading = true;
    private bool _isInitialNavigation = true;
    // pagination varaibles
    private List<ProductDTO> products = new();
    
    private int currentPage;
    private int totalPages;

    private string CategoryDisplay { get; set; } = "Loading...";
    // prevents double loading
	//private PersistingComponentStateSubscription persistingSubscription; TODO : fix double loading issue

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += OnLocationChanged;
        //persistingSubscription = state.RegisterOnPersisting(PersistData);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!state.TryTakeFromJson<List<ProductDTO>>(Category, out var restored))
        {
            if (FilterStateService.SelectedCategory != Category)
            {
                FilterStateService.SetCategory(Category);
            }
            await LoadProductsAsync();
        }
        else
        {
            products = restored ?? new();
        }
    }

    private async Task LoadProductsAsync()
    {
        _isLoading = true;
        StateHasChanged();
        try
        {
            var uri = new Uri(NavigationManager.Uri);
            var queryParams = QueryHelpers.ParseQuery(uri.Query);

			currentPage = 1; // Default to the first page if not specified
            foreach (var param in queryParams)
            {
				Console.WriteLine($"Query Parameter: {param.Key} = {param.Value}");
            }
            if (queryParams.TryGetValue("pageNumber", out var pageValues) && int.TryParse(pageValues.FirstOrDefault(), out var parsedPage))
            {
                currentPage = parsedPage;		
				Console.WriteLine($"Current Page: {currentPage} and {parsedPage}");
            }
            queryParams.Remove("pageNumber"); // Remove pageNumber to avoid duplication in the query string
            var queryString = queryParams.Any()
                ? "?" + string.Join("&", queryParams.Select(kvp => $"{kvp.Key}={kvp.Value.ToString()}"))
                : string.Empty;

            // Get DTO based on a map -> redirect if no match found
            Type dtoType = ProductCategoryMap.GetDtoType(Category);
            if (dtoType == null) NavigationManager.NavigateTo("/notfound", forceLoad: true);

            var serviceType = typeof(ProductService<>).MakeGenericType(dtoType);
            IProductService service = (IProductService)ServiceProvider.GetService(serviceType);

            var pagedResponse = await service.GetPagniatedProductsAsync(queryString, currentPage);
            totalPages = (int)Math.Ceiling((double)pagedResponse.TotalCount / 20);
            Console.WriteLine($"TotalCount: {pagedResponse.TotalCount}, Items: {pagedResponse.Items.Count}");
            //
            if (pagedResponse == null)
            {
                Console.WriteLine($"No response from server.");
                return;
            }
            else if (pagedResponse.Items == null)
            {
                Console.WriteLine($"No products found for category '{Category}'.");
                return;
			}
			products = pagedResponse.Items.ToList();
			Console.WriteLine($"Loaded {products.Count} products for category '{Category}'.");
            //
            StateHasChanged();

            CategoryDisplay = Category.ToLowerInvariant();
            CategoryDisplay = string.Concat(CategoryDisplay[0].ToString().ToUpper(), CategoryDisplay.AsSpan(1));
        }
        catch (InvalidOperationException)
        {
            Console.WriteLine($"Category '{Category}' not found or invalid.");
            NavigationManager.NavigateTo("/notfound", forceLoad: true);
        }
        catch (Exception e)
        {
            Console.WriteLine($"An unexpected error occurred: {e.Message}");
            NavigationManager.NavigateTo("/notfound", forceLoad: true);
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
		}
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        // Force the component to re-render and reload data

        InvokeAsync(LoadProductsAsync);
    }

    private void OnPageChanged(int page)
    {
		var uriBuilder = new UriBuilder(NavigationManager.Uri);
		var query = System.Web.HttpUtility.ParseQueryString(uriBuilder.Query);
		query.Set("pageNumber", page.ToString());
		uriBuilder.Query = query.ToString();
		NavigationManager.NavigateTo(uriBuilder.ToString());
	}

    private Task PersistData()
    {
        state.PersistAsJson(Category, products);
        return Task.CompletedTask;
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
        //persistingSubscription.Dispose();
    }
}
