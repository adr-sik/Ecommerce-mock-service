@page "/products/{category}"
@using Shared.Models

<PageTitle>Weather</PageTitle>
<MudPaper Elevation="25">
    <MudToolBar>
        <MudNumericField @bind-Value="minPrice" Label="Min. price" Format="F1" Variant="Variant.Outlined" @onblur="() => OnPriceChanged()" />
        <MudNumericField @bind-Value="maxPrice" Label="Max. price" Format="F1" Variant="Variant.Outlined" @onblur="() => OnPriceChanged()" />
    </MudToolBar>

    <!-- Filter specific to category -->
    <MudToolBar>
        <p>This filter is for @category</p>
    </MudToolBar>
</MudPaper>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th>Price</th>
                <th>Stock</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in filteredProducts ?? forecasts)
            {
                <tr>
                    <td>@forecast.Brand</td>
                    <td>@forecast.Description</td>
                    <td>@forecast.Price</td>
                    <td>@forecast.Stock</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public string category { get; set; }

    private decimal? minPrice;
    private decimal? maxPrice;

    private List<Product> forecasts = null;
    private List<Product> filteredProducts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = new List<Product>
        {

        };
    }

    private void OnPriceChanged()
    {
		Console.WriteLine($"Min Price: {minPrice}, Max Price: {maxPrice}");
        filteredProducts = forecasts
            .Where(p => p.Price >= minPrice && p.Price <= maxPrice)
			.ToList();
	}
}