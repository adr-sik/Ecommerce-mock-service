@page "/products/{Category?}"
@using Shared.Models
@using Shared.Models.DTOs.ProductTypesDTOs
@using Shared.Models.DTOs
@inject Services.ProductService productService
@inject NavigationManager NavigationManager

<PageTitle>Weather</PageTitle>

<h1>@Category.ToLower()</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (products == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <MudGrid>
        @foreach(var product in products)
        {
            <MudItem xs="12" sm="6" md="4" lg="3">
                <MudCard Elevation="4" Class="rounded-lg h-full flex flex-col cursor-pointer" onclick="@(() => NavigateToItem(product))">
                    <MudCardHeader>
                        <p>@product.Model</p>
                    </MudCardHeader>
                    <MudCardContent>
                        <div class="d-flex justify-center">
                            <MudImage Src="@product.Images.First().Path" Alt="@product.Model" Elevation="25" Class="rounded-lg" Height="200" Width="200" ObjectFit="ObjectFit.Contain"/>
                        </div>
                        <div>
                        @if (@product.Sale.HasValue)
                        {
                            <MudText Typo="Typo.subtitle1" Class="mt-2" Style="@($"color:{Colors.Red.Default}; text-decoration: line-through;")" Inline="true">€@product.Price</MudText>
                            <MudText Typo="Typo.subtitle1" Class="mt-2" Inline="true"> -@product.Sale.Value% </MudText>
                            <MudText Typo="Typo.subtitle1" Class="mt-2" Inline="true">€@GetSalePrice(product.Price, product.Sale.Value).ToString("0.00")</MudText>
                        }
                        else
                        {
                            <MudText Typo="Typo.subtitle1" Class="mt-2">€@product.Price</MudText>
                        }
                        </div>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        }
    </MudGrid>


}

@code {
    [Parameter]
    public string Category { get; set; } = "";
    private List<ProductDTO> products = null;

    protected override async Task OnParametersSetAsync()
    { 
        products = await productService.GetAllAsync(Category);
    }

    private void NavigateToItem(ProductDTO product)
    {
		var productName = (product.Brand + "-" + product.Model).Replace(" ", "-").ToLowerInvariant();
        var encodedProductName = Uri.EscapeDataString(productName);
        NavigationManager.NavigateTo($"/{Category}/{product.Id}/{encodedProductName}");
    }

    private decimal GetSalePrice(decimal price, decimal sale)
    {
            return price * (1 - (sale / 100));
	}
}
